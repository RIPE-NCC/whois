<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.6" jmeter="2.11 r1554548">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Whois Query Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Whois Query Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">174052100</stringProp>
          <!-- <stringProp name="LoopController.loops">1000</stringProp> -->
        </elementProp>
        <!-- <stringProp name="ThreadGroup.num_threads">3</stringProp> -->
        <stringProp name="ThreadGroup.num_threads">30</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Whois configuration" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="hostname" elementType="Argument">
              <stringProp name="Argument.name">hostname</stringProp>
              <stringProp name="Argument.value">77.72.225.197</stringProp><!-- db-sthc-1 -->
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="port" elementType="Argument">
              <stringProp name="Argument.name">port</stringProp>
              <stringProp name="Argument.value">1043</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config - QryLog" enabled="true">
          <stringProp name="delimiter"> -- </stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">querylog.test</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <!-- recyle: restart from the beginning of the file on EOF -->
          <boolProp name="recycle">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <!-- stopThread: stop on EOF -->
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="variableNames">notinteresting,command</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Telnet Query Sampler" enabled="true">
          <stringProp name="BeanShellSampler.query">
String response;
try {
    String host = vars.get(&quot;hostname&quot;);
    int port = Integer.parseInt(vars.get(&quot;port&quot;));
    String command = vars.get(&quot;command&quot;);

    final String DEFAULT_COMMAND = &quot;-rT mntner RIPE-DBM-MNT&quot;;

    net.ripe.db.whois.query.QueryParser parser = new net.ripe.db.whois.query.QueryParser(command);
    net.ripe.db.whois.query.QueryFlag pc = net.ripe.db.whois.query.QueryFlag.PERSISTENT_CONNECTION;
    
    if (parser.hasOption(pc)){
        command=DEFAULT_COMMAND;
    }

    org.apache.commons.net.telnet.TelnetClient tc = new org.apache.commons.net.telnet.TelnetClient();
    tc.connect(host, port);

    java.io.PrintWriter pw = new PrintWriter(new OutputStreamWriter(tc.getOutputStream()), true);
    pw.print(command+&quot;\r\n&quot;);
    pw.flush();

    StringBuilder result = new StringBuilder();

    java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(tc.getInputStream()));
    for (String line = &quot;&quot;; line != null; line = reader.readLine()) {
        result.append(line).append(&quot;\n&quot;);
    }

    tc.disconnect();

    response = result.toString();
} catch (Exception e) {
    java.io.StringWriter swe = new java.io.StringWriter();
    java.io.PrintWriter pwe = new PrintWriter(swe, true);
    e.printStackTrace(pwe);
    pwe.close();
    response = e.getMessage() + &quot;\n\n&quot; + swe.toString();
}

return response;
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters">-Vjmeter,GENPROXY </stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
          <collectionProp name="Asserion.test_strings">
            <stringProp name="1446780033">% This query was served by the RIPE Database Query Service version</stringProp>
          </collectionProp>
          <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
          <boolProp name="Assertion.assume_success">false</boolProp>
          <intProp name="Assertion.test_type">2</intProp>
        </ResponseAssertion>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename">target/jmeter/results/query_telnet_high.jtl</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
