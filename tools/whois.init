#!/bin/bash
# Init script for RIPE Database

SERVICE=whois

# Path to jmxterm-<version>-uber.jar
JMXTERMPATH=jmxterm-1.0.0-SNAPSHOT-uber.jar

### The path to the java executables from JVM to start whois
JAVA="java"
JMAP="jmap"

### Port number to listen on
JMXPORT="1099"

# Default memory
MEM="-Xms1024m -Xmx8g"

### Java Options
JAVA_OPT="-XX:-HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/export/tmp -XX:MaxPermSize=128m -XX:ErrorFile=var/hs_err_pid%p.log -Djsse.enableSNIExtension=false"
GC_LOG="-XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintHeapAtGC -Xloggc:var/gc.log"

### JMX
JMX="-Dcom.sun.management.jmxremote -Dhazelcast.jmx=true -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.port=${JMXPORT}"

### Final assembled command line
COMMAND="$JAVA -D${SERVICE} $JAVA_OPT $JMX $MEM -Dwhois.config=properties -Dhazelcast.config=hazelcast.xml -Dlog4j.configurationFile=file:log4j2.xml -jar whois.jar"
COMMAND_REGEXP="$JAVA -D${SERVICE}"'.*'" -jar whois.jar"

# location of console.log
LOG=var/console.log

# Email address of operator
OPEREMAIL=unread@ripe.net

##############################################################################################
# set COLUMNS
if ! [[ $COLUMNS ]] || [[ $COLUMNS -lt 160 ]]; then
	COLUMNS=160
fi
export COLUMNS

# print server status
function print_status() {
	echo -en "\033[2K\rStatus: $(tail -1 $LOG | cut -c-$((COLUMNS-10)) )"
}

##############################################################################################
# get server status
function server_up() {
	QUERY_PORT=$(perl -ne '/^port\.query\s*=\s*(\d+)/ && print $1' <properties)
	echo -e "-r -L -T inetnum 193.0.0.1" | socat -,ignoreeof tcp:localhost:${QUERY_PORT},connect-timeout=1 2>/dev/null | grep -q '^inetnum:'
	return $?
}

##############################################################################################
# fatal error notifier
my_log() {
        echo "$@"
        #echo "`date +'%y%m%d %H:%M:%S'` $@" >>$ERRLOG
}

##############################################################################################
# after the server is started, this function checks if it has come up, and screams if not.
# it also handles the switch to dynamic mode.
function check_server() {
        # give server a chance
        my_log 'Waiting for the server to come up... (If you know what you are doing, hit ESC to skip waiting)'
        NUM=0
        key=""; escape=$'\x1b';
        
        while ! server_up; do
        	print_status

                read -t1 -s -n1 key || ([[ $? == 1 ]] && sleep 1)       # gracefully handle lack of terminal
                if [[ "$key" == "$escape" ]]; then
                	my_log
                        my_log " *** User cancelled wait at $NUM seconds"
                        break
                fi
                NUM=$[NUM+1]
                if [ $NUM -gt 300 ]; then
                        # bail out
                        my_log
                        my_log "Server does not seem to be up after 240 seconds, giving up. Here is the end of ${LOG}:"
                        echo '-------------------------------------------------------------------------------------'
			tail -15 $LOG
                        echo '-------------------------------------------------------------------------------------'
                        return
                fi
        done
	
	my_log
        my_log "$SERVICE started successfully."
        
        # record size of console log file
        LOGPOS=$(stat -c %s $LOG)
}

##############################################################################################
# MAIN
case "$1" in
	start)
		PID=$(pgrep -f "$COMMAND_REGEXP")
		if [[ $PID ]]; then
			echo "$SERVICE is already running"
			exit 1
		fi

		echo "Starting $SERVICE..."
		# start server
		$COMMAND >>var/console.log 2>&1 </dev/null &
		;;
	stop)
		# kill log checker process (if running)
		PID=$(pgrep -f "$SERVICE start")
		if [[ $PID ]]; then
			kill $PID	# also kills sleep
		fi
		
		# kill jvm
		PID=$(pgrep -f "$COMMAND_REGEXP")
		if [[ $PID ]]; then
			echo " *** If there is a long update running, $SERVICE can take up to 2 hours to exit gracefully!"
			echo -n "Stopping $SERVICE"
			kill $PID
			while true; do
				sleep 1
				echo -n "."
				PID=$(pgrep -f "$COMMAND_REGEXP")
				if ! [[ $PID ]]; then
					echo
					break
				fi
			done
		else
			echo "$SERVICE does not seem to be running"
			echo "Running java processes:"
			ps uxww | grep [j]ava
			exit 1
		fi
		;;
        jmx)
                PID=$(pgrep -f "$COMMAND_REGEXP")
                if ! [[ $PID ]]; then
                    echo "$SERVICE does not seem to be running"
                    exit 1
                fi

        	if [[ $# -gt 1 ]]; then
			echo -e "$2" | java -jar $JMXTERMPATH --url $PID
        	else
	                # drop into JMX console
                    	# only-digits URL is handled specially, as a process id of a JVM to connect to
                    	java -jar $JMXTERMPATH --url $PID
                fi
		        exit 0
                ;;
        threaddump)
                # dump thread state to the console
                PID=$(pgrep -f "$COMMAND_REGEXP")
                if [[ $PID ]]; then
                        echo "Sending signal to $SERVICE to dump thread state to console."
                        kill -3 $PID
                else
                        echo "$SERVICE does not seem to be running"
                        exit 1
                fi
                ;;
	restart)
		$0 stop
		$0 start
		;;
	*)
		echo "Usage: $0 {start|stop|restart|jmx|threaddump}"
		exit 1
		;;
esac

exit 0
