image: $CI_REGISTRY/swe-database-team/gitlab-ci/whois-build:chrome83-ff-jdk8-maven36-node10

variables:
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"
  TZ: Europe/Amsterdam
  WHITESOURCE_CONFIG_FILE: "whitesource.config"

include:
  - project: 'swe/gitlab-ci'
    file: '/templates/whitesource-scanning.yml'

stages:
  - build
  - test
  - integration-test
  - code_quality
  - release
  - deploy

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .m2/repository

build:
  stage: build
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - mvn $MAVEN_OPTS clean install -Prelease
    - docker tag whois:${CI_COMMIT_SHA} $CI_REGISTRY_IMAGE/whois:${CI_COMMIT_SHORT_SHA}
    - docker push $CI_REGISTRY_IMAGE/whois:${CI_COMMIT_SHORT_SHA}
  artifacts:
    paths:
      - "*/target/*.jar"
    reports:
      junit:
        - "*/target/surefire-reports/TEST-*.xml"
        - "*/target/failsafe-reports/TEST-*.xml"

release:
  stage: release
  only:
    - tags
  script:
    - mvn versions:set -DnewVersion=$CI_COMMIT_SHORT_SHA
    - mvn deploy

.it_template: &it_env
  services:
    - mariadb:10.2
  variables:
    MYSQL_ROOT_PASSWORD: root
    TZ: Europe/Amsterdam
  stage: integration-test
  before_script:
    - mysql -uroot -proot -h mariadb -e "CREATE USER 'dbint'@'%' IDENTIFIED BY '';"
    - mysql -uroot -proot -h mariadb -e "GRANT ALL ON *.* TO 'dbint'@'%' WITH GRANT OPTION;"
    - mysql -uroot -proot -h mariadb -e "SET GLOBAL innodb_file_per_table = 0;"
    - mysql -uroot -proot -h mariadb -e "SET GLOBAL innodb_buffer_pool_size = 2147483648;"
    - mysql -uroot -proot -h mariadb -e "SET GLOBAL max_connections=10000;"
  artifacts:
    reports:
      junit:
        - "*/target/surefire-reports/TEST-*.xml"
        - "*/target/failsafe-reports/TEST-*.xml"

whois-groovy-test:
  <<: *it_env
  tags:
    - whois
  rules:
    - if: '$CI_COMMIT_REF_NAME == "master"'
      when: always
    - when: manual
      allow_failure: true
  script:
    - mvn -DskipTests install
    - mvn $MAVEN_OPTS -Ddb.host=mariadb verify -Pintegration -pl whois-endtoend

whois-integration-test:
  <<: *it_env
  tags:
    - whois
  rules:
    - if: '$CI_COMMIT_REF_NAME == "master"'
      when: always
    - when: manual
      allow_failure: true
  script:
    - mvn -DskipTests install
    - mvn $MAVEN_OPTS -Ddb.host=mariadb verify -Pintegration -pl whois-api
    - mvn $MAVEN_OPTS -Ddb.host=mariadb verify -Pintegration -pl whois-client
    - mvn $MAVEN_OPTS -Ddb.host=mariadb verify -Pintegration -pl whois-commons
    - mvn $MAVEN_OPTS -Ddb.host=mariadb verify -Pintegration -pl whois-db
    - mvn $MAVEN_OPTS -Ddb.host=mariadb verify -Pintegration -pl whois-nrtm
    - mvn $MAVEN_OPTS -Ddb.host=mariadb verify -Pintegration -pl whois-query
    - mvn $MAVEN_OPTS -Ddb.host=mariadb verify -Pintegration -pl whois-rpsl
    - mvn $MAVEN_OPTS -Ddb.host=mariadb verify -Pintegration -pl whois-scheduler
    - mvn $MAVEN_OPTS -Ddb.host=mariadb verify -Pintegration -pl whois-update

sonar:
  <<: *it_env
  stage: code_quality
  only:
    - schedules
  tags:
    - whois
  script:
    - mvn install
    - mvn $MAVEN_OPTS -Ddb.host=mariadb verify -Pall -fn # ignore failing (non deterministic) tests, we want QA output regardless
    - echo PWD=$PWD
    - mvn sonar:sonar -Dsonar.host.url=http://sonar.ripe.net -Dsonar.projectVersion=$CI_COMMIT_SHORT_SHA -Dsonar.projectKey=whois -Dsonar.projectName=whois -Dsonar.java.binaries=$PWD/whois-api/target/classes,$PWD/whois-client/target/classes,$PWD/whois-commons/target/classes,$PWD/whois-db/target/classes,$PWD/whois-nrtm/target/classes,$PWD/whois-query/target/classes,$PWD/whois-rpsl/target/classes,$PWD/whois-scheduler/target/classes,$PWD/whois-update/target/classes

deploy_aws:
  stage: deploy
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin $AWS_REGISTRY_IMAGE
  script:
    - git clone -b aws_deploy_properties http://dbase:$DB_OPERATIONAL_DEPLOY_TOKEN@gitlab.ripe.net/swe-database-team/db-operational.git
    - cd db-operational/deployment
    - ./awsUpdateProperties.sh whois $CI_ENVIRONMENT_NAME
    - docker pull $CI_REGISTRY_IMAGE/whois:${CI_COMMIT_SHORT_SHA}
    - docker tag $CI_REGISTRY_IMAGE/whois:${CI_COMMIT_SHORT_SHA} $AWS_REGISTRY_IMAGE/whois:${CI_COMMIT_SHORT_SHA}
    - docker push $AWS_REGISTRY_IMAGE/whois:${CI_COMMIT_SHORT_SHA}
    - TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition whois)
    - NEW_CONTAINER_DEFINITION=$(echo $TASK_DEFINITION | jq ".taskDefinition | del(.taskDefinitionArn, .status, .revision, .compatibilities, .requiresAttributes) | .containerDefinitions[0].image=\"$AWS_REGISTRY_IMAGE/whois:${CI_COMMIT_SHORT_SHA}\" ")
    - aws ecs register-task-definition --cli-input-json "$NEW_CONTAINER_DEFINITION"
    - aws ecs update-service --cluster swe --service whois --task-definition whois
  environment:
    name: aws-rc
  when: manual

deploy_aws_prepdev:
  stage: deploy
  before_script:
    - export AWS_ACCESS_KEY_ID=$PREPDEV_AWS_ACCESS_KEY_ID
    - export AWS_SECRET_ACCESS_KEY=$PREPDEV_AWS_SECRET_ACCESS_KEY
    - export AWS_REGISTRY_IMAGE=$PREPDEV_AWS_REGISTRY_IMAGE
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin $AWS_REGISTRY_IMAGE
  script:
    - export AWS_ACCESS_KEY_ID=$PREPDEV_AWS_ACCESS_KEY_ID
    - export AWS_SECRET_ACCESS_KEY=$PREPDEV_AWS_SECRET_ACCESS_KEY
    - export AWS_REGISTRY_IMAGE=$PREPDEV_AWS_REGISTRY_IMAGE
    - git clone -b aws_deploy_properties http://dbase:$DB_OPERATIONAL_DEPLOY_TOKEN@gitlab.ripe.net/swe-database-team/db-operational.git
    - cd db-operational/deployment
    - ./awsUpdateProperties.sh whois $CI_ENVIRONMENT_NAME
    - docker pull $CI_REGISTRY_IMAGE/whois:${CI_COMMIT_SHORT_SHA}
    - docker tag $CI_REGISTRY_IMAGE/whois:${CI_COMMIT_SHORT_SHA} $AWS_REGISTRY_IMAGE/whois:${CI_COMMIT_SHORT_SHA}
    - docker push $AWS_REGISTRY_IMAGE/whois:${CI_COMMIT_SHORT_SHA}
    - TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition whois)
    - NEW_CONTAINER_DEFINITION=$(echo $TASK_DEFINITION | jq ".taskDefinition | del(.taskDefinitionArn, .status, .revision, .compatibilities, .requiresAttributes) | .containerDefinitions[0].image=\"$AWS_REGISTRY_IMAGE/whois:${CI_COMMIT_SHORT_SHA}\" ")
    - aws ecs register-task-definition --cli-input-json "$NEW_CONTAINER_DEFINITION"
    - aws ecs update-service --cluster swe --service whois --task-definition whois
  environment:
    name: aws-prepdev
  when: manual


.deploy_template: &deploy_env
  stage: deploy
  before_script:
    - mkdir -p /root/.ssh
    - touch /root/.ssh/known_hosts
    - ssh-keyscan hanwoo.ripe.net 2>&1 >>/root/.ssh/known_hosts
    - echo "search ripe.net">>/etc/resolv.conf
    - eval $(ssh-agent -s)
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\nAddressFamily inet\n\n" > ~/.ssh/config
    - echo "$DBASE_SSH_KEY" | tr -d '\r' | ssh-add -
  script:
    - git clone http://dbase:$DB_OPERATIONAL_DEPLOY_TOKEN@gitlab.ripe.net/swe-database-team/db-operational.git
    - find whois-db/target -name whois-db-*-SNAPSHOT.jar -exec cp {} db-operational/deployment/whois-db-$CI_COMMIT_SHA.jar \;
    - cd db-operational/deployment
    - ./stage.sh -p whois -e $CI_ENVIRONMENT_NAME whois-db-$CI_COMMIT_SHA.jar
    - ./sync.sh -p whois -e $CI_ENVIRONMENT_NAME
    - bash ./deploy.sh -p whois -e $CI_ENVIRONMENT_NAME

deploy_dev:
  <<: *deploy_env
  environment:
    name: dev
  when: manual

deploy_prepdev:
  <<: *deploy_env
  environment:
    name: prepdev
  when: manual

deploy_rc:
  <<: *deploy_env
  environment:
    name: rc
  when: manual

deploy_training:
  <<: *deploy_env
  environment:
    name: training
  when: manual

deploy_test:
  <<: *deploy_env
  environment:
    name: test
  when: manual

deploy_prod:
  <<: *deploy_env
  environment:
    name: prod
  when: manual
  only:
    - tags
